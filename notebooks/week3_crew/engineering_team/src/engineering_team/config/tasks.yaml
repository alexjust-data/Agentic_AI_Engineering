design_task:
  description: >
    Take the high level requirements described here and prepare a detailed design for the engineer;
    everything should be in 1 python module, but outline the classes and methods in the module.
    Here are the requirements: {requirements}
    IMPORTANT: Only output the design in markdown format, laying out in detail the classes and functions in the module, describing the functionality.
  expected_output: >
    A detailed design for the engineer, identifying the classes and functions in the module.
  agent: engineering_lead
  output_file: output/{module_name}_design.md

code_task:
  description: >
    Write a python module that implements the design described by the engineering lead, in order to achieve the requirements.
    Here are the requirements: {requirements}
  expected_output: >
    A python module that implements the design and achieves the requirements.
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks.
    The output should be valid Python code that can be directly saved to a file and executed.
  agent: backend_engineer
  context:
    - design_task
  output_file: output/{module_name}

frontend_task:
  description: >
    Create a functional and minimal Gradio UI for the backend class in {module_name}.
    The UI must be split into three tabs:
    - Account: for creating the account, depositing and withdrawing money.
    - Trading: for buying/selling stocks using a fixed list of symbols (e.g., AAPL, TSLA, GOOGL).
    - Reports: for viewing balance, holdings, and transaction history.
    
    DO NOT use deprecated APIs like gr.inputs or gr.outputs.
    DO NOT use gr.JSON unless the function returns actual JSON (like a dictionary or list).
    
    Use `gr.Textbox`, `gr.Number`, `gr.Dataframe`, or `gr.Text` for outputs depending on the returned type.
    
    Import the backend class from {module_name}, instantiate it globally, and ensure all methods are called correctly.
    The app should run immediately with `python app.py` or `uv run app.py`.

  expected_output: >
    A working gradio UI file named app.py that uses the backend class from {module_name}.
    The file should be self-contained and ready to run as-is.
    IMPORTANT: Output ONLY the raw Python code without markdown formatting, code block delimiters, or backticks.
  agent: frontend_engineer
  context:
    - code_task
  output_file: output/app.py


test_task:
  description: >
    Write unit tests for the given backend module {module_name} and create a test_{module_name} in the same directory as the backend module.
  expected_output: >
    A test_{module_name} module that tests the given backend module.
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks.
    The output should be valid Python code that can be directly saved to a file and executed.
  agent: test_engineer
  context:
    - code_task
  output_file: output/test_{module_name}
